name: release
on:
  push:
    tags:
      - 'v*'
jobs:
    lint:
        runs-on: ubuntu-latest
        name: lint
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2-beta
              with:
                node-version: '14'
            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - uses: actions/cache@v2
              id: yarn-cache
              with:
                path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                restore-keys: |
                  ${{ runner.os }}-yarn-
            - name: Install dependencies
              run: yarn --frozen-lockfile
            - name: Lint
              run: yarn lint
    test:
        needs: lint
        runs-on: ubuntu-latest
        name: test
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2-beta
              with:
                node-version: '14'
            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - uses: actions/cache@v2
              id: yarn-cache
              with:
                path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                restore-keys: |
                  ${{ runner.os }}-yarn-
            - name: Install dependencies
              run: yarn --frozen-lockfile
            - name: Run Tests
              run: yarn test
    create-release:
        name: create-release
        needs: test
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
              with:
                fetch-depth: 0
            - uses: actions/setup-node@v2-beta
              with:
                node-version: '14'
            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - uses: actions/cache@v2
              id: yarn-cache
              with:
                path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                restore-keys: |
                  ${{ runner.os }}-yarn-
            - name: Install dependencies
              run: yarn --frozen-lockfile
            - name: Get the version
              id: get-version
              run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}
            - name: Get the version number
              id: get-version-number
              run: |
                version=${{ steps.get-version.outputs.version}}
                echo ::set-output name=number::${version:1}
            - name: Get Release Changelog
              id: get-release-changelog
              run: |
                text="$(yarn run --silent changelog:release --starting-version ${{ steps.get-version.outputs.version }})"
                text="${text//'%'/'%25'}"
                text="${text//$'\n'/'%0A'}"
                text="${text//$'\r'/'%0D'}"
                echo "::set-output name=changelog::$text"
            - name: Print Release Changelog
              run: echo "${{ steps.get-release-changelog.outputs.changelog }}"
            - name: Create Draft Release
              id: create-draft-release
              uses: actions/create-release@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: ${{ github.ref }}
                release_name: Release ${{ github.ref }}
                body: ${{ steps.get-release-changelog.outputs.changelog }}
                draft: true
                prerelease: false
            - name: Create Artifacts
              run: |
                echo "${{ steps.get-version-number.outputs.number }}" > version.txt
                echo "${{ steps.create-draft-release.outputs.upload_url }}" > upload_url.txt
            - name: Save Version Number
              uses: actions/upload-artifact@v2
              with:
                name: version
                path: version.txt
            - name: Save Upload URL
              uses: actions/upload-artifact@v2
              with:
                name: upload_url
                path: upload_url.txt
    pack:
        needs: create-release
        runs-on: ubuntu-latest
        strategy:
            matrix:
              target: ['firefox', 'chrome']
        name: pack
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2-beta
              with:
                node-version: '14'
            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - uses: actions/cache@v2
              id: yarn-cache
              with:
                path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                restore-keys: |
                  ${{ runner.os }}-yarn-
            - name: Install dependencies
              run: yarn --frozen-lockfile
            - name: Build (${{ matrix.target}})
              run: yarn build:${{ matrix.target }} && yarn pack:${{ matrix.target }}
            - uses: actions/download-artifact@v2
              with:
                name: version
            - uses: actions/download-artifact@v2
              with:
                name: upload_url
            - name: Create Artifacts outputs
              id: artifacts
              run: |
                echo "::set-output name=version::$(cat version.txt)"
                echo "::set-output name=upload_url::$(cat upload_url.txt)"
            - name: Upload Release Asset (${{ matrix.target}})
              id: upload-release-asset
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ steps.artifacts.outputs.upload_url }}
                asset_path: ./releases/${{ matrix.target }}/directuc-${{ steps.artifacts.outputs.version }}.zip
                asset_name: directuc-${{ steps.artifacts.outputs.version }}-${{ matrix.target }}.zip
                asset_content_type: application/zip
